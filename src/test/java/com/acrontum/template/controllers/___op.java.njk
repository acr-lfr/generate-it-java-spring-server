{%-set camel_case_operation = _.camelCase(_.deburr(operation_name)).replace(' ','')-%}
{%-set pascal_case_operation = ucFirst(camel_case_operation)-%}
{%-set snake_case_operation = _.snakeCase(camel_case_operation).toUpperCase()-%}
package com.acrontum.template.controllers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.isA;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.acrontum.spring.lib.security.GenericPrincipal;
import com.acrontum.spring.lib.security.JwtUtils;
import com.acrontum.template.repositories.{{ pascal_case_operation }}Repository;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Set;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.client.RestTemplate;

@SpringBootTest
@AutoConfigureMockMvc
class {{ pascal_case_operation }}ControllerTest {

    private final ObjectMapper mapper = new ObjectMapper();
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private JwtUtils jwtUtils;
    @Autowired
    private RestTemplate restTemplate;
    @Autowired
    private {{ pascal_case_operation }}Repository {{ camel_case_operation }}Repository;

    private MockRestServiceServer mockServer;

    @BeforeEach
    public void init() {
        mockServer = MockRestServiceServer.createServer(restTemplate);
    }
    {% for op in operations -%}
        {%- for method, path in op.path -%}
            {% if isValidMethod(method) %}
            {%-set methodName = path.operationId or (method + pascal_case_operation)%}
            {%-set queryParams = _.filter(path.parameters, { 'in': 'query' }) %}

    @DisplayName("given that ..."
            + " when the client calls {{ method.toUpperCase()}} {{ op.path_name }}"
            + " then ...")
    @Test
    void should{{ ucFirst(methodName) }}() throws Exception {
        // Arrange
        String jwt = jwtUtils.toJwt(
                GenericPrincipal.builder().subject("subject").name("John").roles(Set.of("USER")).build());

        // Act / Assert
        this.mockMvc.perform(
            get("{{ op.path_name }}")
                    .header("Authorization", "Bearer " + jwt)
                    {#- The value was chosen because it's valid for a number, boolean, or string.  #}
                    {% for param in queryParams %}.param("{{ param.name }}", "1")
                    {% endfor %}
        ).andDo(print())
        .andExpectAll(
            // jsonPath("$.length()", is(1)),
            status().isOk()
        )
        .andReturn();
    }
            {% endif -%}
        {%- endfor -%}
    {%- endfor %}

}