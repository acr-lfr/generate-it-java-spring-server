{%-set camel_case_operation = _.camelCase(_.deburr(operation_name)).replace(' ','')-%}
{%-set pascal_case_operation = ucFirst(camel_case_operation)-%}
package com.acrontum.template.services;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.acrontum.spring.lib.security.GenericPrincipal;
import com.acrontum.template.models.{{ pascal_case_operation }}Model;
import com.acrontum.template.repositories.{{ pascal_case_operation }}Repository;
import java.time.LocalDateTime;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

@ExtendWith(MockitoExtension.class)
class {{ pascal_case_operation }}ServiceTest {

    @Mock
    {{ pascal_case_operation }}Repository repository;
    @InjectMocks
    {{ pascal_case_operation }}Service underTest;

    @Test
    void shouldFindAllLocalAndRemote{{ pascal_case_operation }}s() {
        // Arrange
        {{ pascal_case_operation }}Model local{{ pascal_case_operation }} = {{ pascal_case_operation }}Model.builder().name("name").build();
        when(repository.findByDeletedAtIsNull()).thenReturn(List.of(local{{ pascal_case_operation }}));

        // Act
        List<{{ pascal_case_operation }}Model> all{{ pascal_case_operation }}s = underTest.findAll();

        // Assert
        assertThat(all{{ pascal_case_operation }}s)
                .hasSize(1)
                .extracting({{ pascal_case_operation }}Model::getName)
                .containsExactly("name");
    }

    @Test
    void shouldAdd{{ pascal_case_operation }}WithRightData() {
        // Arrange
        LocalDateTime predictedCreatedBy = LocalDateTime.now();
        {{ pascal_case_operation }}Model {{ camel_case_operation }}ToAdd = {{ pascal_case_operation }}Model.builder().name("new {{ camel_case_operation }}").build();
        when(repository.save(any({{ pascal_case_operation }}Model.class))).thenAnswer(i -> {
            var u = ({{ pascal_case_operation }}Model) i.getArgument(0);
            return u.toBuilder().id(42).build();
        });

        // Act
        var created{{ pascal_case_operation }} = underTest.save({{ camel_case_operation }}ToAdd);

        // Assert
        assertThat(created{{ pascal_case_operation }})
                .extracting("id", "name")
                .containsExactly(42, created{{ pascal_case_operation }}.getName());
    }
}