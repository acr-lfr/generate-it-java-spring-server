{%-set camel_case_operation = _.camelCase(_.deburr(operation_name)).replace(' ','')-%}
{%-set pascal_case_operation = ucFirst(camel_case_operation)-%}
package com.acrontum.template.services;

import com.acrontum.spring.lib.AcrontumComponent;
import com.acrontum.template.models.{{ pascal_case_operation }};
import com.acrontum.template.repositories.{{ pascal_case_operation }}Repository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

{% macro camelCase(text) -%}
{{ _.camelCase(_.deburr(text)).replace(' ','') }}
{%- endmacro -%}

{%- macro javaParametersDefinition(input=[], path={}) -%}
{%- for param in input -%}
{%- if _.includes(['body', 'formData'], param['in']) -%}
    {{ pascal_case_operation }} model
{%- else -%}
    {{ schemaToJavaType(param.schema) or 'String' }} {{ camelCase(param.name) }}
{%- endif -%}
{{ ', ' if not loop.last }}
{%- endfor -%}
{%- endmacro -%}


{%- macro javaMethod(op, path, method) -%}
{%-set javaMethodName = path.operationId or (method + pascal_case_operation)%}
{%-set javaReturn = pascal_case_operation  %}
{%-set input = _.sortBy(path.parameters, ['in']) %}
    /**
     * Summary: {{ path.summary }}.
     * Description: {{ path.description }}.
     *
     {%- for param in input %}
     {%-set paramName = camelCase(param.name)  %}
     * @param {{ 'model' if paramName == 'dto' else paramName }} {{ trim(param.description) or 'The ' + paramName }}
     {%- endfor %}
     */
    public {{ javaReturn }} {{ javaMethodName }}({{ javaParametersDefinition(input, path) }}) {
        // Logic goes here
        {% if javaReturn !== 'void' -%}
        return new {{ javaReturn }}();
        {%- endif %}
    }
{%- endmacro -%}

/**
 * The type {{ pascal_case_operation }} service.
 */
@Service
@RequiredArgsConstructor
public class {{ pascal_case_operation }}Service extends AcrontumComponent {

    private final {{ pascal_case_operation }}Repository {{ camel_case_operation }}Repository;
    private final MessageSource messageSource;

{%- for op in operations -%}
    {%- for method, path in op.path -%}
        {%- if isValidMethod(method) %}
    {{ javaMethod(op, path, method) }}
        {%- endif -%}
    {%- endfor -%}
{%- endfor %}

}
